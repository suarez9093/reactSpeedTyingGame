{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","STARTING_TIME","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","wordsPerMinute","setWordsPerMinute","textBoxRef","useRef","endGame","filteredWords","trim","split","filter","word","length","calculateWordCount","useEffect","setTimeout","time","words","Math","round","calculateWordsPerMinute","className","ref","disabled","value","onChange","e","target","onClick","current","focus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KA4EeA,MAzEf,WACE,IAAMC,EAAgB,EADT,EAGWC,qBAHX,mBAGNC,EAHM,KAGAC,EAHA,OAI6BF,mBAASD,GAJtC,mBAINI,EAJM,KAISC,EAJT,OAK6BJ,oBAAS,GALtC,mBAKNK,EALM,KAKSC,EALT,OAMqBN,mBAAS,GAN9B,mBAMNO,EANM,KAMKC,EANL,OAO+BR,qBAP/B,mBAONS,EAPM,KAOUC,EAPV,KAQPC,EAAaC,iBAAO,MAuB1B,SAASC,IACPP,GAAiB,GAhBnB,SAA4BL,GAC1B,IACMa,EADWb,EAAKc,OAAOC,MAAM,KACJC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAC9CV,EAAaM,EAAcK,QAc3BC,CAAmBnB,GAqBrB,OAZAoB,qBAAU,WACJhB,GAAmC,IAAlBF,EACnBmB,YAAW,WACTlB,GAAiB,SAAAmB,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBpB,IACTU,IAZJ,WACE,IAAIU,EAAO,GAAKxB,EACZyB,EAAK,mBAAeC,KAAKC,MAAMnB,EAAYgB,EAAO,IAA7C,QACTb,EAAkBc,GAUhBG,MAGD,CAACxB,EAAeE,IAGjB,yBAAKuB,UAAU,aACb,iDACA,uGACA,8BACAC,IAAKlB,EACHmB,UAAWzB,EACX0B,MAAO9B,EACP+B,SApDN,SAAsBC,GAAI,IAChBF,EAAUE,EAAEC,OAAZH,MAER7B,EAAQ6B,MAoDN,+CAAqB5B,EAArB,aACA,4BAAQ2B,SAAUzB,EAAe8B,QA5CrC,WACE/B,EAAiBL,GACjBO,GAAiB,GACjBE,EAAa,GACbN,EAAQ,IACRS,EAAWyB,QAAQN,UAAW,EAC9BnB,EAAWyB,QAAQC,UAsCjB,cACA,2CAAiB9B,GACjB,4BAAKE,KC3DS6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3b4f7c87.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\n\nfunction App() {\n  const STARTING_TIME = 5\n\n  const [text, setText] = useState();\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const [wordsPerMinute, setWordsPerMinute] = useState();\n  const textBoxRef = useRef(null);\n\n  function handleChange(e) {\n    const { value } = e.target;\n\n    setText(value)\n  }\n\n  function calculateWordCount(text) {\n    const wordsArr = text.trim().split(\" \");\n    const filteredWords = wordsArr.filter(word => word !== \"\")\n    setWordCount(filteredWords.length)\n  }\n\n  function startGame() {\n    setTimeRemaining(STARTING_TIME);\n    setIsTimeRunning(true)\n    setWordCount(0)\n    setText(\"\")\n    textBoxRef.current.disabled = false\n    textBoxRef.current.focus()\n  }\n\n  function endGame() {\n    setIsTimeRunning(false)\n    calculateWordCount(text)\n  }\n\n  function calculateWordsPerMinute() {\n    let time = 60 + STARTING_TIME;\n    let words = `You type ${Math.round(wordCount / time * 60)} wpm`;\n    setWordsPerMinute(words)\n  };\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining !== 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000)\n    } else if (timeRemaining === 0) {\n      endGame()\n      calculateWordsPerMinute()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeRemaining, isTimeRunning])\n\n  return (\n    <div className=\"container\">\n      <h1>Speed Typing Game</h1>\n      <h3>Click start and type as many words as you can before the timer runs out</h3>\n      <textarea\n      ref={textBoxRef}\n        disabled={!isTimeRunning}\n        value={text}\n        onChange={handleChange}\n        \n      />\n      <h4>Time remaining: {timeRemaining} seconds </h4>\n      <button disabled={isTimeRunning} onClick={startGame}>Start Game</button>\n      <h1>Word Count: {wordCount}</h1>\n      <h1>{wordsPerMinute}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./style.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}